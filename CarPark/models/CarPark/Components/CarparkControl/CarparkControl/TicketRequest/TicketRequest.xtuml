-- BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ
	VALUES ("8a578568-386e-4294-95dd-43ff8cf0b5c8",
	'TicketRequest',
	2,
	'TicketRequest',
	'Created when a ticket is requested by a driver and deleted when the associated ticket is issued.
To eliminate race conditions between ticket requests and entering/exiting vehicles, all ticket 
requests are queued, regardless of whether carpark is full when the request is made.',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("ff9fe101-4959-4c6c-afed-b1948ae6bac0",
	"8a578568-386e-4294-95dd-43ff8cf0b5c8",
	'Enqueue',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Add this instance to the end of the queue.

// First, find the head of the queue for the associated carpark.
select one carpark related by self->EntryStand[R5.''queued by'']->
                                    Carpark[R4.''controls entry to''];
select one QHead related by carpark->TicketRequest[R3.''will service next''];

// Next, chase through the queue to find the tail.
QTail = QHead;
select one QNext related by QHead->TicketRequest[R1.''precedes''];
while ( not empty QNext ) 
  QTail = QNext;
  select one QNext related by QNext->TicketRequest[R1.''precedes''];
end while;

// Finally, add this instance to the end of the queue and
// link it with the carpark.
relate self to QTail across R1.''follows'';
relate self to carpark across R2.''queued for'';
',
	1,
	'',
	"00000000-0000-0000-0000-000000000000",
	0);
INSERT INTO O_TFR
	VALUES ("435a02c9-7b1e-410e-a81b-ccfbde9e286a",
	"8a578568-386e-4294-95dd-43ff8cf0b5c8",
	'Dequeue',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Remove this instance from the head of the queue and then delete the instance.

// First, find the head of the queue for the associated carpark.
select one carpark related by self->EntryStand[R5.''queued by'']->
                                    Carpark[R4.''controls entry to''];
select one QHead related by carpark->TicketRequest[R3.''will service next''];

// Get the next request in the queue, if there is one.
select one QNext related by QHead->TicketRequest[R1.''precedes''];

// Remove and delete the ticket request at the head of the queue.
unrelate QHead from carpark across R2.''queued for'';
unrelate QHead from carpark across R3.''is next to be serviced by'';
delete object instance QHead;

// If there is another ticket request in the queue, 
// make it the head of the queue.
if ( not empty QNext )
  relate QNext to carpark across R2.''queued for'';
  relate QNext to carpark across R3.''is next to be serviced by'';
end if;',
	1,
	'',
	"ff9fe101-4959-4c6c-afed-b1948ae6bac0",
	0);
INSERT INTO O_ID
	VALUES (0,
	"8a578568-386e-4294-95dd-43ff8cf0b5c8");
INSERT INTO O_ID
	VALUES (1,
	"8a578568-386e-4294-95dd-43ff8cf0b5c8");
INSERT INTO O_ID
	VALUES (2,
	"8a578568-386e-4294-95dd-43ff8cf0b5c8");
INSERT INTO PE_PE
	VALUES ("8a578568-386e-4294-95dd-43ff8cf0b5c8",
	1,
	"0e2ca0ec-d69c-4d5e-a330-1f86d9c2ffa4",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO EP_PKG_PROXY
	VALUES ("0e2ca0ec-d69c-4d5e-a330-1f86d9c2ffa4",
	"00000000-0000-0000-0000-000000000000",
	"887b82b9-56ec-4387-b15a-8b42f655cdba",
	'CarparkControl',
	'',
	0,
	'../CarparkControl.xtuml');
